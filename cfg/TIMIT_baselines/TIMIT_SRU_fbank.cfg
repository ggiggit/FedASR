[cfg_proto]
cfg_proto = proto/global.proto
cfg_proto_chunk = proto/global_chunk.proto

[exp]
cmd = 
run_nn_script = run_nn
out_folder = exp/TIMIT_SRU_fbank
seed = 3234
use_cuda = True
multi_gpu = False
save_gpumem = False
n_epochs_tr = 24

[dataset1]
data_name = TIMIT_tr
fea = fea_name=fbank
	fea_lst=quick_test/data/train/feats_fbank.scp
	fea_opts=apply-cmvn --utt2spk=ark:quick_test/data/train/utt2spk  ark:quick_test/fbank/cmvn_train.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
	cw_left=0
	cw_right=0
	
lab = lab_name=lab_cd
	lab_folder=quick_test/dnn4_pretrain-dbn_dnn_ali
	lab_opts=ali-to-pdf
	lab_count_file=auto
	lab_data_folder=quick_test/data/train/
	lab_graph=quick_test/graph
	
	lab_name=lab_mono
	lab_folder=quick_test/dnn4_pretrain-dbn_dnn_ali
	lab_opts=ali-to-phones --per-frame=true
	lab_count_file=none
	lab_data_folder=quick_test/data/train/
	lab_graph=quick_test/graph
n_chunks = 5

[dataset2]
data_name = TIMIT_dev
fea = fea_name=fbank
	fea_lst=quick_test/data/dev/feats_fbank.scp
	fea_opts=apply-cmvn --utt2spk=ark:quick_test/data/dev/utt2spk  ark:quick_test/fbank/cmvn_dev.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
	cw_left=0
	cw_right=0
	
lab = lab_name=lab_cd
	lab_folder=quick_test/dnn4_pretrain-dbn_dnn_ali_dev
	lab_opts=ali-to-pdf
	lab_count_file=auto
	lab_data_folder=quick_test/data/dev/
	lab_graph=quick_test/graph
	
	lab_name=lab_mono
	lab_folder=quick_test/dnn4_pretrain-dbn_dnn_ali_dev
	lab_opts=ali-to-phones --per-frame=true
	lab_count_file=none
	lab_data_folder=quick_test/data/dev/
	lab_graph=quick_test/graph
n_chunks = 1

[dataset3]
data_name = TIMIT_test
fea = fea_name=fbank
	fea_lst=quick_test/data/test/feats_fbank.scp
	fea_opts=apply-cmvn --utt2spk=ark:quick_test/data/test/utt2spk  ark:quick_test/fbank/cmvn_test.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
	cw_left=0
	cw_right=0
	
lab = lab_name=lab_cd
	lab_folder=quick_test/dnn4_pretrain-dbn_dnn_ali_test
	lab_opts=ali-to-pdf
	lab_count_file=auto
	lab_data_folder=quick_test/data/test/
	lab_graph=quick_test/graph
	
	lab_name=lab_mono
	lab_folder=quick_test/dnn4_pretrain-dbn_dnn_ali_test
	lab_opts=ali-to-phones --per-frame=true
	lab_count_file=none
	lab_data_folder=quick_test/data/test/
	lab_graph=quick_test/graph
n_chunks = 1

[data_use]
train_with = TIMIT_tr
valid_with = TIMIT_dev
forward_with = TIMIT_test

[batches]
batch_size_train = 8
max_seq_length_train = 1000
increase_seq_length_train = True
start_seq_len_train = 100
multply_factor_seq_len_train = 2
batch_size_valid = 8
max_seq_length_valid = 1000

[architecture1]
arch_name = SRU_layers
arch_proto = proto/SRU.proto
arch_library = neural_networks
arch_class = SRU
arch_pretrain_file = none
arch_freeze = False
arch_seq_model = True
sru_hidden_size=550
sru_num_layers=4
sru_dropout=0.1
sru_rnn_dropout=0.1
sru_use_tanh=False
sru_use_relu=False
sru_use_selu=False
sru_weight_norm=False
sru_layer_norm=False
sru_bidirectional=True
sru_is_input_normalized=False
sru_has_skip_term=True
sru_rescale=True
sru_highway_bias=-1
sru_n_proj=256
arch_lr = 0.001
arch_halving_factor = 0.5
arch_improvement_threshold = 0.001
arch_opt=adam
opt_betas=0.9,0.999
opt_eps=1e-8
opt_weight_decay=1e-7
opt_amsgrad=False

[architecture2]
arch_name = MLP_layers
arch_proto = proto/MLP.proto
arch_library = neural_networks
arch_class = MLP
arch_pretrain_file = none
arch_freeze = False
arch_seq_model = False
dnn_lay = N_out_lab_cd
dnn_drop = 0.0
dnn_use_laynorm_inp = False
dnn_use_batchnorm_inp = False
dnn_use_batchnorm = False
dnn_use_laynorm = False
dnn_act = softmax
arch_lr = 0.001
arch_halving_factor = 0.5
arch_improvement_threshold = 0.001
arch_opt=adam
opt_betas=0.9,0.999
opt_eps=1e-8
opt_weight_decay=1e-7
opt_amsgrad=False

[architecture3]
arch_name = MLP_layers2
arch_proto = proto/MLP.proto
arch_library = neural_networks
arch_class = MLP
arch_pretrain_file = none
arch_freeze = False
arch_seq_model = False
dnn_lay = N_out_lab_mono
dnn_drop = 0.0
dnn_use_laynorm_inp = False
dnn_use_batchnorm_inp = False
dnn_use_batchnorm = False
dnn_use_laynorm = False
dnn_act = softmax
arch_lr = 0.001
arch_halving_factor = 0.5
arch_improvement_threshold = 0.001
arch_opt=adam
opt_betas=0.9,0.999
opt_eps=1e-8
opt_weight_decay=1e-7
opt_amsgrad=False

[model]
model_proto = proto/model.proto
model = out_dnn1=compute(SRU_layers,fbank)
	out_dnn2=compute(MLP_layers,out_dnn1)
	out_dnn3=compute(MLP_layers2,out_dnn1)
	loss_mono=cost_nll(out_dnn3,lab_mono)
	loss_mono_w=mult_constant(loss_mono,1.0)
	loss_cd=cost_nll(out_dnn2,lab_cd)
	loss_final=sum(loss_cd,loss_mono_w)
	err_final=cost_err(out_dnn2,lab_cd)

[forward]
forward_out = out_dnn2
normalize_posteriors = True
normalize_with_counts_from = lab_cd
save_out_file = False
require_decoding = True

[decoding]
decoding_script_folder = kaldi_decoding_scripts/
decoding_script = decode_dnn.sh
decoding_proto = proto/decoding.proto
min_active = 200
max_active = 7000
max_mem = 50000000
beam = 13.0
latbeam = 8.0
acwt = 0.2
max_arcs = -1
skip_scoring = false
scoring_script = local/score.sh
scoring_opts = "--min-lmwt 1 --max-lmwt 10"
norm_vars = False

